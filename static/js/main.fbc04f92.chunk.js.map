{"version":3,"sources":["img/xoma.png","img/star.png","img/bg.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","img_loaded","bg_loaded","pin","pinUpdate","bind","e","arr","this","index","parseInt","target","id","replace","value","setState","$","show","focus","right","i","length","addClass","setTimeout","removeClass","children","css","width","height","src","bg","onLoad","className","map","v","type","onChange","key","maxLength","alt","xoma","star","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,wQCuE5BC,E,kDA/DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAY,EACZC,WAAW,EACXC,IAAK,CAAC,GAAG,GAAG,GAAG,KAEnB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAPF,E,sDAUTC,GACN,IAAIC,EAAMC,KAAKR,MAAMG,IACjBM,EAAQC,SAASJ,EAAEK,OAAOC,GAAGC,QAAQ,YAAY,KAGrD,GAFAN,EAAIE,GAASH,EAAEK,OAAOG,MACtBN,KAAKO,SAAS,CAACZ,IAAKI,IACjBE,EAAQ,EACPO,IAAE,SAAD,OAAUP,EAAM,IAAKQ,OAAOC,YAG7B,CAEA,IADA,IAAIC,EAAQ,CAAC,EAAE,EAAE,EAAE,GACXC,EAAI,EAAGA,EAAIZ,KAAKR,MAAMG,IAAIkB,OAAQD,IACtC,GAAIZ,KAAKR,MAAMG,IAAIiB,IAAMD,EAAMC,GAAG,CAC9BJ,IAAE,UAAUM,SAAS,SACrBC,YAAW,WACPP,IAAE,UAAUQ,YAAY,SAASC,WAAWC,IAAI,UAAW,UAAW,KACtEV,IAAE,WAAWE,QACjB,MAGRV,KAAKO,SAAS,CAACZ,IAAK,CAAC,GAAG,GAAG,GAAG,S,+BAI5B,IAAD,OACL,OACI,6BACI,yBAAKwB,MAAO,EAAGC,OAAQ,EAAGC,IAAKC,IAAIC,OAAQ,WAAO,EAAKhB,SAAS,CAACb,WAAW,OAC5E,yBAAK8B,UAAS,aAASxB,KAAKR,MAAME,UAAuB,GAAX,YAC9C,yBAAK8B,UAAU,SACVxB,KAAKR,MAAMG,IAAI8B,KAAI,SAACC,EAAEd,GAAH,OAChB,2BACIR,GAAI,QAAQQ,EACZe,KAAK,OACLC,SAAU,EAAKhC,UAEf4B,UAAW,EAAKhC,MAAMG,IAAIiB,GAAK,UAAY,GAC3CN,MAAO,EAAKd,MAAMG,IAAIiB,GACtBiB,IAAK,MAAMjB,EACXkB,UAAW,QAIvB,yBAAKN,UAAS,oBAAgBxB,KAAKR,MAAMC,WAAwB,GAAX,WAClD,yBAAKsC,IAAI,OAAOV,IAAKW,MACrB,yBAAKT,OAAQ,kBAAMR,YAAW,WAAO,EAAKR,SAAS,CAACd,YAAY,MAAS,MAAMsC,IAAI,OAAOV,IAAKY,Y,GAxDjGC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fbc04f92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/xoma.1cc17ec9.png\";","module.exports = __webpack_public_path__ + \"static/media/star.7e7b00f1.png\";","module.exports = __webpack_public_path__ + \"static/media/bg.87ea0409.jpg\";","import React from 'react';\nimport './App.css';\nimport xoma from './img/xoma.png';\nimport star from './img/star.png';\nimport bg from './img/bg.jpg';\nimport $ from 'jquery';\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            img_loaded: false,\n            bg_loaded: false,\n            pin: ['','','','']\n        }\n        this.pinUpdate = this.pinUpdate.bind(this);\n    }\n\n    pinUpdate(e){\n        let arr = this.state.pin;\n        let index = parseInt(e.target.id.replace(/[^0-9]/gim,''));\n        arr[index] = e.target.value;\n        this.setState({pin: arr});\n        if(index < 3){\n            $(`#field${index+1}`).show().focus();\n            //setTimeout(() => {$(`#field${index+1}`).focus()}, 100);\n        }\n        else{\n            let right = [1,9,7,7];\n            for(let i = 0; i < this.state.pin.length; i++){\n                if (this.state.pin[i] != right[i]){\n                    $('.input').addClass('wrong');\n                    setTimeout(() => {\n                        $('.input').removeClass('wrong').children().css('display', 'none');}, 820);\n                        $(`#field0`).focus();\n                    break;\n                }\n            }\n            this.setState({pin: ['','','','']});\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <img width={1} height={1} src={bg} onLoad={() => {this.setState({bg_loaded: true})}}/>\n                <div className={`bg ${!this.state.bg_loaded ? 'hidden' : ''}`}/>\n                <div className=\"input\">\n                    {this.state.pin.map((v,i) => (\n                        <input\n                            id={'field'+i}\n                            type=\"text\"\n                            onChange={this.pinUpdate}\n                            //onKeyPress={this.pinUpdate}\n                            className={this.state.pin[i] ? 'entered' : ''}\n                            value={this.state.pin[i]}\n                            key={'444'+i}\n                            maxLength={1}\n                        />\n                        ))}\n                </div>\n                <div className={`xoma_star ${!this.state.img_loaded ? 'hidden' : ''}`}>\n                    <img alt=\"xoma\" src={xoma}/>\n                    <img onLoad={() => setTimeout(() => {this.setState({img_loaded: true})}, 500)} alt=\"star\" src={star}/>\n                </div>\n                {/*<span className=\"text\">сос мыслом...</span>*/}\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}