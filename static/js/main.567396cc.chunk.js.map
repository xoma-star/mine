{"version":3,"sources":["img/xoma.png","img/star.png","img/bg.jpg","fire.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","CombLeft","e","text","num","App","props","state","img_loaded","bg_loaded","pin","combinations","pinUpdate","bind","arr","this","index","parseInt","target","id","replace","value","setState","$","show","focus","addClass","answer","join","indexOf","push","firestore","collection","doc","toString","get","then","r","removeClass","exists","localStorage","setItem","hide","window","open","data","return","setTimeout","children","css","width","height","src","bg","onLoad","className","style","getItem","display","map","v","i","type","onChange","key","maxLength","alt","xoma","star","length","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.567396cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/xoma.1cc17ec9.png\";","module.exports = __webpack_public_path__ + \"static/media/star.7e7b00f1.png\";","module.exports = __webpack_public_path__ + \"static/media/bg.87ea0409.jpg\";","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD_Noe00-ju08frvAtBl9leupxLvifjqLc\",\r\n    authDomain: \"mini-games-5216f.firebaseapp.com\",\r\n    databaseURL: \"https://mini-games-5216f.firebaseio.com\",\r\n    projectId: \"mini-games-5216f\",\r\n    storageBucket: \"mini-games-5216f.appspot.com\",\r\n    messagingSenderId: \"935962519630\",\r\n    appId: \"1:935962519630:web:0d0eb0b8034cc99339fb1f\",\r\n    measurementId: \"G-8B7J71PH7X\"\r\n};\r\n\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\nexport default fire;","import React from 'react';\nimport './App.css';\nimport xoma from './img/xoma.png';\nimport star from './img/star.png';\nimport bg from './img/bg.jpg';\nimport $ from 'jquery';\nimport fire from './fire';\n\nconst CombLeft = (e) => {\n    const num = e.num;\n    let text;\n    text = `Осталось перебрать ${num} комбинаций`;\n    if(num == 9980){\n        text = 'Может быть, дата прошлого тысячелетия';\n    }\n    if (num == 9990){\n        text = 'Возможно, это какая-то дата';\n    }\n    return (\n        <div>{text}</div>\n    )\n}\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            img_loaded: false,\n            bg_loaded: false,\n            pin: ['','','',''],\n            combinations: []\n        }\n        this.pinUpdate = this.pinUpdate.bind(this);\n    }\n\n    pinUpdate(e){\n        let arr = this.state.pin;\n        let index = parseInt(e.target.id.replace(/[^0-9]/gim,''));\n        arr[index] = e.target.value;\n        this.setState({pin: arr});\n        if(index < 3){\n            $(`#field${index+1}`).show().focus();\n        }\n        else{\n            $('.input').addClass('checking');\n            let answer = this.state.pin.join('');\n            if(this.state.combinations.indexOf(answer) === -1){\n                this.state.combinations.push(answer);\n            }\n            fire.firestore().collection('secret').doc(answer.toString()).get().then(\n                r => {\n                    $('.input').removeClass('checking');\n                    if (r.exists){\n                        localStorage.setItem('step', '1');\n                        $('.input').hide();\n                        window.open(r.data().return);\n                    }\n                    else{\n                        $('.input').addClass('wrong');\n                        $('.comb_left').addClass('shown');\n                        setTimeout(() => {\n                            $('.input').removeClass('wrong').children().css('display', 'none');\n                        }, 820);\n                        setTimeout(() => {$('.comb_left').removeClass('shown');}, 2000);\n                        $(`#field0`).focus();\n                    }\n                }\n            );\n            this.setState({pin: ['','','','']});\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <img width={1} height={1} src={bg} onLoad={() => {this.setState({bg_loaded: true})}}/>\n                <div className={`bg ${!this.state.bg_loaded ? 'hidden' : ''}`}/>\n                <div className=\"input\" style={localStorage.getItem('step') ? {display: 'none'} : {}}>\n                    {this.state.pin.map((v,i) => (\n                        <input\n                            id={'field'+i}\n                            type=\"number\"\n                            onChange={this.pinUpdate}\n                            //onKeyPress={this.pinUpdate}\n                            className={this.state.pin[i] ? 'entered' : ''}\n                            value={this.state.pin[i]}\n                            key={'444'+i}\n                            maxLength={1}\n                        />\n                        ))}\n                </div>\n                <div className={`xoma_star ${!this.state.img_loaded ? 'hidden' : ''}`}>\n                    <img alt=\"xoma\" src={xoma}/>\n                    <img onLoad={() => setTimeout(() => {this.setState({img_loaded: true})}, 500)} alt=\"star\" src={star}/>\n                </div>\n                <div className=\"comb_left\">\n                    <CombLeft num={10*10*10*10 - this.state.combinations.length}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}